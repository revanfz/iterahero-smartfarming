// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output        = "./generated/client"
  // binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  username     String
  email        String         @unique
  password     String
  role         String
  greenhouse   Greenhouse[]
  tandon       Tandon[]
  notification Notification[]
  penjadwalan  Penjadwalan[]
  created_at   DateTime       @default(now())
  updated_at   DateTime?      @updatedAt
}

model Microcontroller {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  brand      String
  location   String
  sensor     Sensor[]
  aktuator   Aktuator[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

model Greenhouse {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  image       String
  location    String
  user        User[]
  aktuator    Aktuator[]
  sensor      Sensor[]
  penjadwalan Penjadwalan[]
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
}

model TandonPenyimpanan {
  id            Int        @id @default(autoincrement())
  nama          String     @unique
  distributable Boolean
  tandon        Tandon     @relation(fields: [tandonId], references: [id])
  tandonId      Int
  actuator      Aktuator[]
}

model Resep {
  id          Int           @id @default(autoincrement())
  ppm         Int
  ph          Float
  volume      Float
  nama        String
  penjadwalan Penjadwalan[]
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
}

model Penjadwalan {
  id           Int        @id @default(autoincrement())
  waktu        String
  isActive     Boolean
  durasi       Int
  hari         Int[]
  resep        Resep      @relation(fields: [resepId], references: [id])
  resepId      Int
  tandon       Tandon     @relation(fields: [tandonId], references: [id])
  tandonId     Int
  greenhouse   Greenhouse @relation(fields: [greenhouseId], references: [id])
  greenhouseId Int
  user         User       @relation(fields: [createdBy], references: [id])
  createdBy    Int
  created_at   DateTime   @default(now())
  updated_at   DateTime?  @updatedAt
}

model Category {
  id         Int        @id @default(autoincrement())
  logo       String
  color      String
  name       String     @unique
  satuan     String?
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
  sensor     Sensor[]
  aktuator   Aktuator[]
}

model Sensor {
  id                Int              @id @default(autoincrement())
  name              String
  calibration       String?
  brand             String
  unit_measurement  String
  status            Boolean          @default(false)
  channel           Int?
  GPIO              Int?
  category          Category         @relation(fields: [type], references: [name])
  type              String
  range_min         Int?
  range_max         Int?
  microcontroller   Microcontroller? @relation(fields: [microcontrollerId], references: [id])
  microcontrollerId Int?
  tandon            Tandon?          @relation(fields: [tandonId], references: [id])
  tandonId          Int?
  tandonBahan       TandonBahan?     @relation(fields: [tandonBahanId], references: [id])
  tandonBahanId     Int?
  greenhouseId      Int?
  greenhouse        Greenhouse?      @relation(fields: [greenhouseId], references: [id])
  created_at        DateTime         @default(now())
  updated_at        DateTime?        @updatedAt
}

model Aktuator {
  id                  Int                @id @default(autoincrement())
  name                String
  merek               String?
  status              Boolean            @default(false)
  GPIO                Int?
  microcontroller     Microcontroller?   @relation(fields: [microcontrollerId], references: [id])
  microcontrollerId   Int?
  category            Category           @relation(fields: [type], references: [name])
  type                String
  tandon              Tandon?            @relation(fields: [tandonId], references: [id])
  tandonId            Int?
  greenhouse          Greenhouse?        @relation(fields: [greenhouseId], references: [id])
  greenhouseId        Int?
  tandonPenyimpanan   TandonPenyimpanan? @relation(fields: [tandonPenyimpananId], references: [id])
  tandonPenyimpananId Int?
  tandonBahan         TandonBahan?       @relation(fields: [tandonBahanId], references: [id])
  tandonBahanId       Int?
  created_at          DateTime           @default(now())
  updated_at          DateTime?          @updatedAt
}

model TandonBahan {
  id         Int        @id @default(autoincrement())
  nama       String
  sensor     Sensor[]
  aktuator   Aktuator[]
  tandon     Tandon     @relation(fields: [tandonId], references: [id])
  tandonId   Int
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

model Tandon {
  id                Int                 @id @default(autoincrement())
  nama              String
  user              User                @relation(fields: [userId], references: [id])
  userId            Int
  status            String              @default("Kosong")
  isOnline          Boolean
  rasioA            Float               @default(0)
  rasioB            Float               @default(0)
  rasioAir          Float               @default(0)
  ppm               Float               @default(0)
  image             String
  location          String
  sensor            Sensor[]
  aktuator          Aktuator[]
  tandonBahan       TandonBahan[]
  penjadwalan       Penjadwalan[]
  tandonPenyimpanan TandonPenyimpanan[]
  created_at        DateTime            @default(now())
  updated_at        DateTime?           @updatedAt
}

model Notification {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  message    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())
}
