// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  // binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  username   String
  email      String       @unique
  password   String
  role       String
  greenhouse Greenhouse[]
  tandon     Tandon[]
  created_at DateTime     @default(now())
  updated_at DateTime?    @updatedAt
}

model Greenhouse {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  thumbnail  String
  location   String
  user       User[]
  aktuator   Aktuator[]
  sensor     Sensor[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

model TandonPenyimpanan {
  id            Int        @id @default(autoincrement())
  nama          String     @unique
  distributable Boolean
  tandon        Tandon     @relation(fields: [tandonId], references: [id])
  tandonId      Int
  actuator      Aktuator[]
  resep         Resep[]
}

model Resep {
  id                Int                 @id @default(autoincrement())
  ppm               Int?
  ph                Float
  volume            Float?
  nama              String
  interval          Int
  nutrisiA          Float?
  nutrisiB          Float?
  air               Float?
  tipe              String
  penjadwalan       Penjadwalan[]
  tandonPenyimpanan TandonPenyimpanan[]
  created_at        DateTime            @default(now())
  updated_at        DateTime?           @updatedAt
}

model Penjadwalan {
  id         Int       @id @default(autoincrement())
  waktu      String
  isActive   Boolean
  durasi     Int
  hari       Int[]
  resep      Resep     @relation(fields: [resepId], references: [id])
  resepId    Int
  tandon     Tandon    @relation(fields: [tandonId], references: [id])
  tandonId   Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Sensor {
  id               Int          @id @default(autoincrement())
  name             String
  persamaan        String
  brand            String
  unit_measurement String
  status           Boolean
  nilai            Int
  icon             String?
  tandon           Tandon?      @relation(fields: [tandonId], references: [id])
  tandonId         Int?
  tandonBahan      TandonBahan? @relation(fields: [tandonBahanId], references: [id])
  tandonBahanId    Int?
  greenhouseId     Int?
  greenhouse       Greenhouse?  @relation(fields: [greenhouseId], references: [id])
  created_at       DateTime     @default(now())
  updated_at       DateTime?    @updatedAt
}

model Aktuator {
  id                  Int                @id @default(autoincrement())
  name                String
  merek               String
  icon                String
  color               String
  status              Boolean
  portRaspi           Int
  tandon              Tandon?            @relation(fields: [tandonId], references: [id])
  tandonId            Int?
  greenhouse          Greenhouse?        @relation(fields: [greenhouseId], references: [id])
  greenhouseId        Int?
  tandonPenyimpanan   TandonPenyimpanan? @relation(fields: [tandonPenyimpananId], references: [id])
  tandonPenyimpananId Int?
  tandonBahan         TandonBahan?       @relation(fields: [tandonBahanId], references: [id])
  tandonBahanId       Int?
  created_at          DateTime           @default(now())
  updated_at          DateTime?          @updatedAt
}

model TandonBahan {
  id         Int        @id @default(autoincrement())
  nama       String
  sensor     Sensor[]
  aktuator   Aktuator[]
  tandon     Tandon     @relation(fields: [tandonId], references: [id])
  tandonId   Int
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

model Tandon {
  id                Int                 @id @default(autoincrement())
  nama              String
  user              User                @relation(fields: [userId], references: [id])
  userId            Int
  status            String
  isOnline          Boolean
  rasioA            Float
  rasioB            Float
  rasioAir          Float
  ppm               Float
  sensor            Sensor[]
  aktuator          Aktuator[]
  tandonBahan       TandonBahan[]
  penjadwalan       Penjadwalan[]
  tandonPenyimpanan TandonPenyimpanan[]
  created_at        DateTime            @default(now())
  updated_at        DateTime?           @updatedAt
}
